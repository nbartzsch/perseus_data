```{r}
#| output: false
#| echo: false

# Only edit below this line
#############################################################################

# OSS Data
oss_ori <- 2.0
oss_mnl_p <- 39
oss_rnl_p <- 38
oss_pln_p <- 12
oss_mf <- 60

# FSS Data
fss_ori <- 3.3
fss_mnl_p <- NA
fss_rnl_p <- 30
fss_pln_p <- 12
fss_mf <- 17.2

# PRDT Data
ign_oxi_p <- 15
ign_oxi_nv <- 9
ign_fue_p <- 10
ign_fue_nv <- 9

#############################################################################
# Only edit above this line
```

---
title: "PERSEUS Medusa 01"
subtitle: "First Firing"
date: 16.11.2024
author:
  - name: PERSEUS
    affiliation: 
      - name: ARIS
        url: https://aris-space.ch/perseus-2024/
  - name: Nicolas Bartzsch
    email: nbartzsch@ethz.ch
    affiliation: 
      - name: ARIS
        url: https://aris-space.ch/perseus-2024/
editor: visual
format:
  html:
    toc: true
execute:
  warning: false
  eval: true
  echo: false
---

```{r}
#| output: false

##Load libraries

library(tidyverse)
library(gt)
library(readr)
library(here)
library(plotly)
```

```{r}
#| output: false
#| echo: false

# Only edit below this line
#############################################################################
# Import data
processed_data_sens_1 <- read_csv(here("data", "processed_data/Medusa_01/first_firing", "filtered_signal_2.csv"))
processed_data_sens <- read_csv(here("data", "processed_data/Medusa_01/first_firing", "filtered_signal_1.csv"))

#############################################################################
# Only edit above this line
```

## General Information

The goal of this webpage is to show the data from the Kistler sensors in a more interactive way, since the large data sets and very fast phenomena we want to analyze are hard to visualize in static graphs.

## Setup Configuration

This section contains all information about the setup of the system. This helps identifying and tracing back the effects of different configurations.

```{r}

#Create OSS talbe data
table_geom_oss <- data.frame(
  oss_ori = paste(oss_ori, "[mm]"),
  oss_mnl_p = paste(oss_mnl_p, "[bar]"),
  oss_rnl_p = paste(oss_rnl_p, "[bar]"),
  oss_pln_p = paste(oss_pln_p, "[bar]"),
  oss_mf  = paste(oss_mf , "[g/s]")
)
# Create OSS table
table_geom_oss |>
    gt() |>
    tab_header(
        title = "OSS Setup"
    ) |>
    cols_label(
        oss_ori = ("Orifice Size"),
        oss_mnl_p = ("Mainline"),
        oss_rnl_p = ("Runline"),
        oss_pln_p = ("Plenum"),
        oss_mf = ("Mass Flow")
    ) |>
    cols_align(align = "center")


#Create FSS talbe data
table_geom_fss <- data.frame(
  fss_ori = paste(fss_ori, "[mm]"),
  fss_mnl_p = paste(fss_mnl_p, "[bar]"),
  fss_rnl_p = paste(fss_rnl_p, "[bar]"),
  fss_pln_p = paste(fss_pln_p, "[bar]"),
  fss_mf  = paste(fss_mf , "[g/s]")
)
# Create FSS table
table_geom_fss |>
    gt() |>
    tab_header(
        title = "FSS Setup"
    ) |>
    cols_label(
        fss_ori = ("Orifice Size"),
        fss_mnl_p = ("Mainline"),
        fss_rnl_p = ("Runline"),
        fss_pln_p = ("Plenum"),
        fss_mf = ("Mass Flow")
    ) |>
    cols_align(align = "center")

#Create prdt talbe data
table_geom_fss <- data.frame(
  ign_oxi_p = paste(ign_oxi_p, "[bar]"),
  ign_oxi_nv = paste(ign_oxi_nv, "[T.f.c.]"),
  ign_fue_p  = paste(ign_fue_p , "[bar]"),
  ign_fue_nv = paste(ign_fue_nv, "[T.f.c.]")
)
# Create prdt table
table_geom_fss |>
    gt() |>
    tab_header(
        title = "Pre-Detonator Setup"
    ) |>
    cols_label(
        ign_oxi_p = ("Oxidizer Pressure"),
        ign_oxi_nv = ("Oxidizer Needle Valve"),
        ign_fue_p = ("Fuel Pressure"),
        ign_fue_nv = ("Fuel Needle Valve")
    ) |>
    cols_align(align = "center")
```

## Data from Firing

The Figures below show the unfiltered sensor response of both sensors. The sensors are offset by 90Â° in the combustion chamber and at different distances from the injector plate. The data below was gathered by Kistler sensors of type 601CAA placed in a recessed mounting chamber in the combustion chamber. A protective paste has been was applied to protect the sensors from thermal shock.

![](png_plots/Medusa_01/first_firing/response_time_01.svg){fig-align="center" width="500"}

![](png_plots/Medusa_01/first_firing/response_time_02.svg){fig-align="center" width="500"}

### Frequency Analysis

To asses the what frequencies are present in our sensor response we can look at the short-time Fourier transform of the signal and the entire spectrum.

![](png_plots/Medusa_01/first_firing/stft_01.svg){fig-align="center" width="500"}

![](png_plots/Medusa_01/first_firing/stft_02.svg){fig-align="center" width="500"}

@fig-fft shows the spectrum of the filtered signal of one sensor. **All the data shown below has been processed**. The original signal has been filtered with a High-Pass 4th order Butterworth filter with corner frequency at 1 kHz and a Low-Pass Butterworth filter with corner frequency at 65 kHz. The filtering was done to remove sensor drift, disturbances, Helmholtz Chamber resonance, high frequency noise etc. Both sensors showed a similar spectrum (only the magnitude of the peaks changed slightly). Both showed a clear peak around 14.5 kHz.

```{r}
#| label: fig-fft
#| fig-cap: "Frequency analysis of sensor response"
# Extract time and value columns
time <- processed_data_sens$time
values <- processed_data_sens$value

# Compute the FFT
fft_values <- fft(values)

# Compute the frequency bins
n <- length(values)
sampling_interval <- time[2] - time[1]
sampling_rate <- 1 / sampling_interval
freq <- (0:(n-1)) * (sampling_rate / n) / 1000  # Convert to kHz

# Compute the magnitude of the FFT values
magnitude <- Mod(fft_values)

# Scale the magnitude relative to the maximum magnitude
magnitude <- magnitude / max(magnitude)

# Create a data frame for plotting
fft_data <- data.frame(freq = freq, magnitude = magnitude)

fft_data <- fft_data |>
  filter(freq < 100)

# Plot the FFT
p <- ggplot(fft_data, aes(x = freq, y = magnitude)) +
    geom_line() +
    scale_x_continuous(limits = c(0, 100)) +
    labs(title = "FFT of Filtered Response", x = "Frequency [kHz]", y = "Scaled Magnitude") +
    theme_minimal()

interactive_plot <- ggplotly(p)
interactive_plot

```

### Sensor Response

@fig-resp-1 shows a section of the filtered signal over 1 ms. We can determine the period $T$ of the signal to be $T \approx 0.067$ ms which translates to a frequency of $f = \frac{1}{T} \approx 14.9$ kHz. The responses of both sensors are shown in the plot.

```{r}
#| label: fig-resp-1
#| fig-cap: "Segment of sensor signal during 1 ms whit some phase bewtween both signals"
lower_time <- 0.82801 # 4.2535, 4.3678, 4.3126, 4.00469, 4.26432
upper_time <- lower_time + 0.001

plot_data_1_1 <- processed_data_sens_1 |>
  filter(time > lower_time) |>
  filter(time < upper_time)
  
plot_data_1 <-  processed_data_sens |>
  filter(time > lower_time) |>
  filter(time < upper_time)

p <- ggplot() +
  geom_path(data = plot_data_1, aes(x = time, y = value, color = "Sensor 1")) +
  geom_path(data = plot_data_1_1, aes(x = time, y = value, color = "Sensor 2")) +
  theme_minimal() +
  labs(title = "Sensor Responses", x = "Time [s]", y = "Sensor Response") +
  #ylim(-1.1, 1.5) +
  scale_color_manual(values = c("Sensor 1" = "blue", "Sensor 2" = "red")) +
  labs(color = "Sensor")

interactive_plot <- ggplotly(p)
interactive_plot
```

Other sections, like the one in @fig-resp-2, show a very small phase-shift.

```{r}
#| label: fig-resp-2
#| fig-cap: "Segment of sensor signal during 1 ms with little phase shift"
lower_time <- 0.8330111 #83019 
upper_time <- lower_time + 0.001

plot_data_2 <-  processed_data_sens |>
  filter(time > lower_time) |>
  filter(time < upper_time)

plot_data_2_1 <- processed_data_sens_1 |>
  filter(time > lower_time) |>
  filter(time < upper_time)


p <- ggplot() +
  geom_path(data = plot_data_2, aes(x = time, y = value, color = "Sensor 1")) +
  geom_path(data = plot_data_2_1, aes(x = time, y = value, color = "Sensor 2")) +
  theme_minimal() +
  labs(title = "Sensor Responses", x = "Time [s]", y = "Sensor Response") +
  #ylim(-1.1, 1.5) +
  scale_color_manual(values = c("Sensor 1" = "blue", "Sensor 2" = "red")) +
  labs(color = "Sensor")

interactive_plot <- ggplotly(p)
interactive_plot

```

Lastly a bigger section of the signal of the "stable" part of the firing is shown in @fig-resp-3. This plot is meant to be explored by using the interactive properties of the plot. Zooming in on the time axis allows you to see a detailed response curve.

```{r}
#| label: fig-resp-3
#| fig-cap: "Sensor response of the 'stable' section of the firing"
plot_data_3 <-  processed_data_sens |>
  filter(time < 1) |>
  filter(time > 0.8)

plot_data_3_1 <-  processed_data_sens_1 |>
  filter(time < 1) |>
  filter(time > 0.8)

p <- ggplot() +
  geom_path(data = plot_data_3_1, aes(x = time, y = value, color = "Sensor 2")) +
  geom_path(data = plot_data_3, aes(x = time, y = value, color = "Sensor 1")) +
  theme_minimal() +
  labs(title = "Sensor Responses", x = "Time [s]", y = "Sensor Response") +
  #ylim(-1.1, 1.5) +
  scale_color_manual(values = c("Sensor 1" = "blue", "Sensor 2" = "red")) +
  labs(color = "Sensor")

interactive_plot <- ggplotly(p)
interactive_plot

```
